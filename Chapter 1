------EXERCISES----------

1.1-1
Give a real-world example that requires sorting or a real-world example that requires computing a convex hull.

The contact book in our phones needs to be sorted alphabetically so that we can find person phone number easily. 
Some other examples are flights, movie tickets they are all sorted by time. Even our daily schedules are sorted by time.

Convex hull can be defined as a step of points, a line connecting the points in a convex polygonic way, so that all the points are inside it.
- Finding the best price to sell a home (OREGON ML Example)

1.1-2
Other than speed, what other measures of efficiency might one use in a real-world
setting?
time

1.1-3
Select a data structure that you have seen previously, and discuss its strengths and
limitations.
queues - first in first out
stacks - first in last out 

1.1-4
How are the shortest-path and traveling-salesman problems given above similar?
How are they different?
Same -need an algorithm
Difference - no efficient algorithm 

1.1-5
Come up with a real-world problem in which only the best solution will do. Then
come up with one in which a solution that is “approximately” the best is good
enough.
- Best - movie ticket line
- Approximately - printer queue (no difference between large printing stack and just one page)


1.2-1
Give an example of an application that requires algorithmic content at the application level, and discuss the function of the algorithms involved.
When you are online shopping and need to sort by price low to high~
Netflix streaming, that uses NLP? or any sort of AI function to recommend what you would like to watch next based on your previous selections

1.2-2
Suppose we are comparing implementations of insertion sort and merge sort on the
same machine. For inputs of size n, insertion sort runs in 8n2 steps, while merge
sort runs in 64n lg n steps. For which values of n does insertion sort beat merge
sort?
Cannot be solved linearly, but..
8n^2 = 64nlog2(n)
n^2 = 8nlog2(n)
f(n)=n−8log2(n)

for 2 < n < 43

n/(log2(n))  < 8
We can then use bisection search to find such value.

1.2-3
What is the smallest value of n such that an algorithm whose running time is 100n^2
runs faster than an algorithm whose running time is 2^n on the same machine?
100n^2 = 2^n
log2(100 * n^2) < log2(2^n)
log2(100) + log2(n^2) < n
log2(100) < n - log2(n^2)
**square them to make it go on one side and 0 on opposite side
n^2 − 4log2(n)n + 4(log2(n))2 − (log2(100))2 > 0

--wolfram alpha--
n ~ 15 


1-1 Comparison of running times
For each function f .n/ and time t in the following table, determine the largest
size n of a problem that can be solved in time t, assuming that the algorithm to
solve the problem takes f .n/ microseconds.
