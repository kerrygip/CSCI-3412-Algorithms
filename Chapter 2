-------SECTION 2: GETTING STARTED ------------

2.1-1
Using Figure 2.2 as a model, illustrate the operation of INSERTION-SORT on the
array A = (31; 41; 59; 26; 41; 58)

31 41 59 26 41 58 - select a key to start(59) and compare left. 59 is bigger than 41, so it stays. Go over 1, 26 and compare left. 26 smaller than 59 so move
31 41 26 59 41 58 - compare 26 again left and move
31 26 41 59 41 58 - compare 26 again and move
26 31 41 59 41 58 - 26 now smalleset number, look at the next key, 41, 41 is smaller than 59 so shift
26 31 41 41 59 58 - now 58 is smaller than 59 so move again
26 31 41 41 58 59 - done




2.1-2
Rewrite the INSERTION-SORT procedure to sort into nonincreasing instead of nondecreasing order.
- the code on page 18 

Insertion sort(A)
for j=1 to A.length
  key = A[j]
  i = j-1
  while i>0 and A[i] < key   //switch the sign here to change to decreasing order
    A[i+1] = A[i]
    i = i-1
  A[i+1] = key

2.1-3
Consider the searching problem:
Input: A sequence of n numbers A= (a1,a2...a,n) and a value v.
Output: An index i such that  v=A[i] or the special value NIL if  does not
appear in A.
Write pseudocode for linear search, which scans through the sequence, looking
for v. Using a loop invariant, prove that your algorithm is correct. Make sure that
your loop invariant fulfills the three necessary properties.

for (i=1; i<A.length; i++)
  if A[i]==v;
  return i
return NIL  


2.1-4
Consider the problem of adding two n-bit binary integers, stored in two n-element
arrays A and B. The sum of the two integers should be stored in binary form in
an (n+1) element array C. State the problem formally and write pseudocode for
adding the two integer

Problem summary: Add arrays and convert numbers to binary

C[n+1] = new array
//need to find range for sum
n = MAX(A.length, B.Length)

total = 0

for (i=0; i<n; i++)
  C[i] = A[i] + B[i] + total 
  total = (A[i] + B[i]+ total) /2 
C[n+1] = total
return C

????

Python code:
def AddBinary(A, B):
    carry = 0
    n = max(len(A), len(B))
    C = [0 for i in range(n + 1)]
    for i in range(n):
        # One of A and B has length less than n
        # We need to treat index out of bound for that array
        # This is not explicitly handled in pseudocode
        a = A[i] if i < len(A) else 0
        b = B[i] if i < len(B) else 0

        # Modulo for sum and integer division for carry
        C[i] = (a + b + carry) % 2
        carry = (a + b + carry) // 2
    C[n] = carry
    return C





----------SECTION 2.2 : ANALYZING ALGORITHMS------------




2.2-1
Express the function n^3=1000 / 100n^2 - 100n + 3 in terms of O notation.
f(n) = n^3

2.2-2
Consider sorting n numbers stored in array A by first finding the smallest element
of A and exchanging it with the element in A[1]. Then find the second smallest
element of A, and exchange it with A[2]. Continue in this manner for the first n 1
elements of A. Write pseudocode for this algorithm, which is known as selection
sort. What loop invariant does this algorithm maintain? Why does it need to run
for only the first n - 1 elements, rather than for all n elements? Give the best-case
and worst-case running times of selection sort in O notation.

def SelectionSort(A):
    for i in range(len(A)):
        minIndex = i
        for j in range(i + 1, len(A)):
            if A[j] < A[minIndex] and j != minIndex:
                minIndex = j
        A[i], A[minIndex] = A[minIndex], A[i]

2.2-3
Consider linear search again (see Exercise 2.1-3). How many elements of the input sequence need to be checked on the average, assuming that the element being
searched for is equally likely to be any element in the array? How about in the
worst case? What are the average-case and worst-case running times of linear
search in 0notation? Justify your answers.

Big O would be f(n) = n since there is no squares involved. Worst case would be it having to search the entire thing, average would be n/2 so half of it


2.2-4
How can we modify almost any algorithm to have a good best-case running time?
Turn it to a merge sort LOL 
Just make sure it has a best runtime case of f(n) = n



-------SECTION 2.3 DESIGNING ALGORITHMS -------------
2.3-1
Using Figure 2.4 as a model, illustrate the operation of merge sort on the array
A = (3, 41, 52, 26, 38, 57, 9, 49)

3  41   |  52  26  |   38  57  |   9  49 
sort and merge
3  41     26  52  |   38  57     9  49

3  26  41  52     |   9  38  49  57

3  9  26  38  41  49  52  57 

2.3-2
Rewrite the MERGE procedure so that it does not use sentinels, instead stopping
once either array L or R has had all its elements copied back to A and then copying
the remainder of the other array back into A.
https://atekihcan.github.io/CLRS/02/E02.03-02/

2.3-3
Use mathematical induction to show that when n is an exact power of 2, the solution of the recurrence

T(n) = { 2            if n=2
     = {2T(n/2) + n   if n=2^k, for k>1
     
     is T(n) = nlogn
     
Base case = n=2 where T(2) = 2 = 2log(2)     
     
     
2.3-4
We can express insertion sort as a recursive procedure as follows. In order to sort
A[1..n], we recursively sort A[1..n-1] and then insert A[n] into the sorted array
A[1..n-1]. Write a recurrence for the running time of this recursive version of
insertion sort     
Sort the sub-array A[1..n-1]
Insert A[n] into the sorted sub-array from step 1 in proper position


2.3-5
Referring back to the searching problem (see Exercise 2.1-3), observe that if the
sequence A is sorted, we can check the midpoint of the sequence against  and
eliminate half of the sequence from further consideration. The binary search algorithm repeats this procedure, halving the size of the remaining portion of the
sequence each time. Write pseudocode, either iterative or recursive, for binary
search. Argue that the worst-case running time of binary search is O(logn)


2.3-6
Observe that the while loop of lines 5–7 of the INSERTION-SORT procedure in
Section 2.1 uses a linear search to scan (backward) through the sorted subarray
A[1..j-1] Can we use a binary search (see Exercise 2.3-5) instead to improve
the overall worst-case running time of insertion sort to O(nlogn)

while i>0 and A[i] > key
  A[A+i] = A[i]
  i = i-1
  This loop serves two purposes:

A linear search to scan (backward) through the sorted sub-array to find the proper position for keykey.
Shift the elements that are greater than keykey towards the end to insert keykey in the proper position.
Although we can reduce the number of comparisons by using binary search to accomplish purpose 1, 
we still need to shift all the elements greater than keykey towards the end of the array to make space for keykey. 
And this shifting of elements runs at O(n) time, even in average case (as we need to shift half of the elements). 
So, the overall worst-case running time of insertion sort will still be O(n^2)

2.3-7 ?
Describe a O(nlogn)-time algorithm that, given a set S of n integers and another
integer x, determines whether or not there exist two elements in S whose sum is
exactly x.


PROBLEMS
2-1 Insertion sort on small arrays in merge sort
Although merge sort runs in O(nlogn) worst-case time and insertion sort runs
in O(n^2) worst-case time, the constant factors in insertion sort can make it faster
in practice for small problem sizes on many machines. Thus, it makes sense to
coarsen the leaves of the recursion by using insertion sort within merge sort when
subproblems become sufficiently small. Consider a modification to merge sort in
which n/k sublists of length k are sorted using insertion sort and then merged
using the standard merging mechanism, where k is a value to be determined.
a. Show that insertion sort can sort the n/k sublists, each of length k, in O(nk)
worst-case time.
b. Show how to merge the sublists in O(nlog(n/k)) worst-case time.
c. Given that the modified algorithm runs in O(nk+nlog(n/k)) worst-case time,
what is the largest value of k as a function of n for which the modified algorithm
has the same running time as standard merge sort, in terms of ‚O notation?
d. How should we choose k in practice?

2-2 Correctness of bubblesort
Bubblesort is a popular, but inefficient, sorting algorithm. It works by repeatedly
swapping adjacent elements that are out of order.
BUBBLESORT.A/
1 for i to A.length-1
2   for j = A.length downtow i+1 
3     if A[j] < A[j-1]
4       exchange A[j] with A[j-1]
a. Let A' denote the output of BUBBLESORT.A/. To prove that BUBBLESORT is
correct, we need to prove that it terminates and that
A'[1] <= A'[2] <= ...A'[n] 

where n = A:length. In order to show that BUBBLESORT actually sorts, what
else do we need to prove?
The next two parts will prove inequality (2.3).
b. State precisely a loop invariant for the for loop in lines 2–4, and prove that this
loop invariant holds. Your proof should use the structure of the loop invariant
proof presented in this chapter.
c. Using the termination condition of the loop invariant proved in part (b), state
a loop invariant for the for loop in lines 1–4 that will allow you to prove inequality (2.3). Your proof should use the structure of the loop invariant proof
presented in this chapter.
d. What is the worst-case running time of bubblesort? How does it compare to the
running time of insertion sort?

2-3 Correctness of Horner’s rule
The following code fragment implements Horner’s rule for evaluating a polynomial
P(x) = Eakx^k

1 y=0
2 for i =n downto 0
3   y=a(i) + xy

a. In terms of O notation, what is the running time of this code fragment for
Horner’s rule?
b. Write pseudocode to implement the naive polynomial-evaluation algorithm that
computes each term of the polynomial from scratch. What is the running time
of this algorithm? How does it compare to Horner’s rule?
c. Consider the following loop invariant:
At the start of each iteration of the for loop of lines 2–3,

Interpret a summation with no terms as equaling 0. Following the structure of
the loop invariant proof presented in this chapter, use this loop invariant to show
that, at termination, 

d. Conclude by arguing that the given code fragment correctly evaluates a polynomial characterized by the coefficients a0 a1,...,an.
2-4 Inversions
Let A[1..n] be an array of n distinct numbers. If i<j and A[i] > A[j] , then the
pair (i,j) is called an inversion of A.
a. List the five inversions of the array (2,3,8,6,1)
b. What array with elements from the set {1,2,...n} has the most inversions?
How many does it have?
c. What is the relationship between the running time of insertion sort and the
number of inversions in the input array? Justify your answer.
d. Give an algorithm that determines the number of inversions in any permutation
on n elements in O(nlogn) worst-case time. (Hint: Modify merge sort.)
